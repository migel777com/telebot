// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mailer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EmailSendingServiceClient is the client API for EmailSendingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmailSendingServiceClient interface {
	//Unary
	SendEmail(ctx context.Context, in *EmailRequest, opts ...grpc.CallOption) (*EmailResponse, error)
}

type emailSendingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmailSendingServiceClient(cc grpc.ClientConnInterface) EmailSendingServiceClient {
	return &emailSendingServiceClient{cc}
}

func (c *emailSendingServiceClient) SendEmail(ctx context.Context, in *EmailRequest, opts ...grpc.CallOption) (*EmailResponse, error) {
	out := new(EmailResponse)
	err := c.cc.Invoke(ctx, "/mailer.EmailSendingService/sendEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmailSendingServiceServer is the server API for EmailSendingService service.
// All implementations must embed UnimplementedEmailSendingServiceServer
// for forward compatibility
type EmailSendingServiceServer interface {
	//Unary
	SendEmail(context.Context, *EmailRequest) (*EmailResponse, error)
	mustEmbedUnimplementedEmailSendingServiceServer()
}

// UnimplementedEmailSendingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEmailSendingServiceServer struct {
}

func (UnimplementedEmailSendingServiceServer) SendEmail(context.Context, *EmailRequest) (*EmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmail not implemented")
}
func (UnimplementedEmailSendingServiceServer) mustEmbedUnimplementedEmailSendingServiceServer() {}

// UnsafeEmailSendingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmailSendingServiceServer will
// result in compilation errors.
type UnsafeEmailSendingServiceServer interface {
	mustEmbedUnimplementedEmailSendingServiceServer()
}

func RegisterEmailSendingServiceServer(s grpc.ServiceRegistrar, srv EmailSendingServiceServer) {
	s.RegisterService(&EmailSendingService_ServiceDesc, srv)
}

func _EmailSendingService_SendEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailSendingServiceServer).SendEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mailer.EmailSendingService/sendEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailSendingServiceServer).SendEmail(ctx, req.(*EmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmailSendingService_ServiceDesc is the grpc.ServiceDesc for EmailSendingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmailSendingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mailer.EmailSendingService",
	HandlerType: (*EmailSendingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "sendEmail",
			Handler:    _EmailSendingService_SendEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mailer/mailer.proto",
}
