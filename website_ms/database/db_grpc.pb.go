// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package database

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DatabaseAccessServiceClient is the client API for DatabaseAccessService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatabaseAccessServiceClient interface {
	GetBooks(ctx context.Context, in *BookRequest, opts ...grpc.CallOption) (*BigResponse, error)
	RegisterUser(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	ConfirmRegister(ctx context.Context, in *ConfirmRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	CheckVerification(ctx context.Context, in *VerificationRequest, opts ...grpc.CallOption) (*VerificationResponse, error)
}

type databaseAccessServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDatabaseAccessServiceClient(cc grpc.ClientConnInterface) DatabaseAccessServiceClient {
	return &databaseAccessServiceClient{cc}
}

func (c *databaseAccessServiceClient) GetBooks(ctx context.Context, in *BookRequest, opts ...grpc.CallOption) (*BigResponse, error) {
	out := new(BigResponse)
	err := c.cc.Invoke(ctx, "/database.DatabaseAccessService/getBooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseAccessServiceClient) RegisterUser(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/database.DatabaseAccessService/registerUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseAccessServiceClient) ConfirmRegister(ctx context.Context, in *ConfirmRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/database.DatabaseAccessService/confirmRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseAccessServiceClient) CheckVerification(ctx context.Context, in *VerificationRequest, opts ...grpc.CallOption) (*VerificationResponse, error) {
	out := new(VerificationResponse)
	err := c.cc.Invoke(ctx, "/database.DatabaseAccessService/checkVerification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatabaseAccessServiceServer is the server API for DatabaseAccessService service.
// All implementations must embed UnimplementedDatabaseAccessServiceServer
// for forward compatibility
type DatabaseAccessServiceServer interface {
	GetBooks(context.Context, *BookRequest) (*BigResponse, error)
	RegisterUser(context.Context, *RegisterRequest) (*RegisterResponse, error)
	ConfirmRegister(context.Context, *ConfirmRequest) (*RegisterResponse, error)
	CheckVerification(context.Context, *VerificationRequest) (*VerificationResponse, error)
	mustEmbedUnimplementedDatabaseAccessServiceServer()
}

// UnimplementedDatabaseAccessServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDatabaseAccessServiceServer struct {
}

func (UnimplementedDatabaseAccessServiceServer) GetBooks(context.Context, *BookRequest) (*BigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBooks not implemented")
}
func (UnimplementedDatabaseAccessServiceServer) RegisterUser(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedDatabaseAccessServiceServer) ConfirmRegister(context.Context, *ConfirmRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmRegister not implemented")
}
func (UnimplementedDatabaseAccessServiceServer) CheckVerification(context.Context, *VerificationRequest) (*VerificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckVerification not implemented")
}
func (UnimplementedDatabaseAccessServiceServer) mustEmbedUnimplementedDatabaseAccessServiceServer() {}

// UnsafeDatabaseAccessServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatabaseAccessServiceServer will
// result in compilation errors.
type UnsafeDatabaseAccessServiceServer interface {
	mustEmbedUnimplementedDatabaseAccessServiceServer()
}

func RegisterDatabaseAccessServiceServer(s grpc.ServiceRegistrar, srv DatabaseAccessServiceServer) {
	s.RegisterService(&DatabaseAccessService_ServiceDesc, srv)
}

func _DatabaseAccessService_GetBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseAccessServiceServer).GetBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/database.DatabaseAccessService/getBooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseAccessServiceServer).GetBooks(ctx, req.(*BookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseAccessService_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseAccessServiceServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/database.DatabaseAccessService/registerUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseAccessServiceServer).RegisterUser(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseAccessService_ConfirmRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseAccessServiceServer).ConfirmRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/database.DatabaseAccessService/confirmRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseAccessServiceServer).ConfirmRegister(ctx, req.(*ConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseAccessService_CheckVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseAccessServiceServer).CheckVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/database.DatabaseAccessService/checkVerification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseAccessServiceServer).CheckVerification(ctx, req.(*VerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DatabaseAccessService_ServiceDesc is the grpc.ServiceDesc for DatabaseAccessService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DatabaseAccessService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "database.DatabaseAccessService",
	HandlerType: (*DatabaseAccessServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getBooks",
			Handler:    _DatabaseAccessService_GetBooks_Handler,
		},
		{
			MethodName: "registerUser",
			Handler:    _DatabaseAccessService_RegisterUser_Handler,
		},
		{
			MethodName: "confirmRegister",
			Handler:    _DatabaseAccessService_ConfirmRegister_Handler,
		},
		{
			MethodName: "checkVerification",
			Handler:    _DatabaseAccessService_CheckVerification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "database/db.proto",
}
